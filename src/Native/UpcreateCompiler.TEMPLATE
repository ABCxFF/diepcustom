// @ts-nocheck

/*
    DiepCustom - custom tank game server that shares diep.io's WebSocket protocol
    Copyright (C) 2022 ABCxFF (github.com/ABCxFF)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program. If not, see <https://www.gnu.org/licenses/>
*/

import Writer from "../Coder/Writer";
import { Color } from "../Const/Enums";
import { CameraEntity } from "./Camera";
import { Entity } from "./Entity";

/** Entity creation compiler function... Run! */
export const compileCreation = (camera: CameraEntity, w: Writer, entity: Entity) => {
    w.entid(entity).u8(1);

# for every field group, define if its set on the entity
^<<
FIELD_GROUPS.map((e,i) => e[0].startsWith('!') ? "" : (
`\n    const has${e[0]} = !!entity.${e[0].toLowerCase()}Data;`
)).join('')
>>^

    // Field group def
    let at = -1;
# if the entity has the field group, add the field group to the field group xor table
^<<
FIELD_GROUPS.map((e,i) => e[0].startsWith('!') ? "" : (
`\n    if (has${e[0]}) { w.u8((${i} - at) ^ 1); at = ${i}; };`
)).join('')
>>^
    w.u8(1); // close table

# now for every field, in the order of FIELD_ORDER, check if the group of that field is set on the entity, and if it is, write the field to the packet
^<<
FIELD_ORDER.map(([group, name], idx) => {
    const g = EXISTANT_FIELD_GROUPS.find(e => e[0] === group);
    if (!g) return '';
    const field = g[1].find(f => f.name === name);
    if (field.name === "color") {
        return `\n    if (has${group}) w.${field.encType}(entity.${group.toLowerCase()}Data.values.${name} === Color.Tank && !(entity.relationsData && entity.relationsData.values.team === (camera.cameraData.values.player && camera.cameraData.values.player.relationsData && camera.cameraData.values.player.relationsData.values.team)) ? Color.EnemyTank : entity.${group.toLowerCase()}Data.values.${name});`
    }
    if (!field.amount) return `\n    if (has${group}) w.${field.encType}(entity.${group.toLowerCase()}Data.values.${name});`
    else {
        return `\n    if (has${group}) for (at = 0; at < ${field.amount}; ++at) w.${field.encType}(entity.${group.toLowerCase()}Data.values.${name}.values[at]);`
    }
}).join('')
>>^
};

/** Entity update compiler function... Run! */
export const compileUpdate = (camera: Camera, w: Writer, entity: Entity) => {
    w.entid(entity).raw(0, 1);

# define variables that store if a field group exists
^<<
FIELD_GROUPS.map((e,i) => e[0].startsWith('!') ? "" : (
`\n    const has${e[0]} = !!entity.${e[0].toLowerCase()}Data;`
)).join('')
>>^

    let at = -1;
# for every field in the field order, check if the fieldgroup exists, if it does, check if the field has an update, and if it does, compile the field's value to the packet
^<<
FIELD_ORDER.map(([group, name], idx) => {
    const g = EXISTANT_FIELD_GROUPS.find(e => e[0] === group);
    if (!g) return '';
    const id = g[1].findIndex(f => f.name === name);
    const field = g[1][id];
    let encType = name === "scoreboardScores" ? "vi" : field.encType;
    if (field.name === "color") {
        return `\n    if (has${group}) if (entity.${group.toLowerCase()}Data.state[${id}]) { w.u8((${idx} - at) ^ 1); at = ${idx}; w.${encType}(entity.${group.toLowerCase()}Data.values.${name} === Color.Tank && !(entity.relationsData && entity.relationsData.values.team === (camera.cameraData.values.player && camera.cameraData.values.player.relationsData && camera.cameraData.values.player.relationsData.values.team)) ? Color.EnemyTank : entity.${group.toLowerCase()}Data.values.${name});};`
    }
    if (!field.amount) return `\n    if (has${group}) if (entity.${group.toLowerCase()}Data.state[${id}]) {w.u8((${idx} - at) ^ 1); at = ${idx}; w.${encType}(entity.${group.toLowerCase()}Data.values.${name});};`
    else {
        let updateFieldStr
        return `\n    if (has${group}) if (entity.${group.toLowerCase()}Data.state[${id}]) { w.u8((${idx} - at) ^ 1); at = -1; ${
            Array(field.amount).fill().map((_, i) => {
               return `if (entity.${group.toLowerCase()}Data.values.${name}.state[${i}]) { w.u8((${i} - at) ^ 1); w.${encType}(entity.${group.toLowerCase()}Data.values.${name}.values[${i}]); at = ${i}; } `
            }).join('')
        }w.u8(1); at = ${idx}; };`
    }
}).join('')
>>^

    w.u8(1); // close table
}